"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeCheckAndClose = void 0;
const driver_1 = require("@applitools/driver");
const take_screenshots_1 = require("./utils/take-screenshots");
const to_base_check_settings_1 = require("../automation/utils/to-base-check-settings");
const wait_for_lazy_load_1 = require("../automation/utils/wait-for-lazy-load");
const uniquify_renderers_1 = require("../automation/utils/uniquify-renderers");
const extract_renderer_key_1 = require("../automation/utils/extract-renderer-key");
const abort_error_1 = require("../errors/abort-error");
const utils = __importStar(require("@applitools/utils"));
function makeCheckAndClose({ eyes, target: defaultTarget, renderers: defaultRenderers = [], spec, signal, logger: mainLogger, }) {
    return async function checkAndClose({ target = defaultTarget, settings = {}, logger = mainLogger, } = {}) {
        var _a, _b;
        logger = logger.extend(mainLogger);
        logger.log('Command "checkAndClose" is called with settings', settings);
        if (!target)
            throw new Error('Method was called with no target');
        if (signal === null || signal === void 0 ? void 0 : signal.aborted) {
            logger.warn('Command "checkAndClose" was called after test was already aborted');
            throw new abort_error_1.AbortError('Command "checkAndClose" was called after test was already aborted');
        }
        const uniqueRenderers = (0, uniquify_renderers_1.uniquifyRenderers)((_a = settings.renderers) !== null && _a !== void 0 ? _a : defaultRenderers);
        const baseTargets = [];
        const baseSettings = [];
        const transformedRenderers = [];
        if ((0, driver_1.isDriver)(target, spec)) {
            const driver = await (0, driver_1.makeDriver)({ spec, driver: target, reset: target === defaultTarget, logger });
            await driver.currentContext.setScrollingElement((_b = settings.scrollRootElement) !== null && _b !== void 0 ? _b : null);
            const environment = await driver.getEnvironment();
            uniqueRenderers.forEach(renderer => {
                var _a, _b;
                var _c, _d;
                if (utils.types.has(renderer, 'iosDeviceInfo')) {
                    (_a = (_c = renderer.iosDeviceInfo).version) !== null && _a !== void 0 ? _a : (_c.version = environment.platformVersion);
                }
                else if (utils.types.has(renderer, 'androidDeviceInfo')) {
                    (_b = (_d = renderer.androidDeviceInfo).version) !== null && _b !== void 0 ? _b : (_d.version = environment.platformVersion);
                }
                return renderer;
            });
            if (settings.lazyLoad && environment.isWeb) {
                await (0, wait_for_lazy_load_1.waitForLazyLoad)({
                    context: driver.currentContext,
                    settings: settings.lazyLoad !== true ? settings.lazyLoad : {},
                    logger,
                });
            }
            const { elementReferencesToCalculate, getBaseCheckSettings } = (0, to_base_check_settings_1.toBaseCheckSettings)({ settings });
            if (environment.isWeb || !environment.isApplitoolsLib || settings.screenshotMode === 'default') {
                const screenshots = await (0, take_screenshots_1.takeScreenshots)({
                    driver,
                    settings: {
                        ...settings,
                        renderers: uniqueRenderers,
                        regionsToCalculate: elementReferencesToCalculate,
                        calculateView: !!settings.pageId,
                        domSettings: settings.sendDom ? { proxy: eyes.test.eyesServer.proxy } : undefined,
                    },
                    logger,
                });
                transformedRenderers.push(...uniqueRenderers);
                screenshots.forEach(({ calculatedRegions, ...baseTarget }) => {
                    baseTargets.push(baseTarget);
                    baseSettings.push(getBaseCheckSettings({ calculatedRegions }));
                });
            }
            else {
                const nmlClient = await eyes.core.getNMLClient({
                    driver,
                    settings: { ...eyes.test.eyesServer, renderEnvironmentsUrl: eyes.test.renderEnvironmentsUrl },
                    logger,
                });
                const screenshots = await nmlClient.takeScreenshots({
                    settings: {
                        renderers: uniqueRenderers,
                        fully: settings.fully,
                        stitchMode: settings.stitchMode,
                        hideScrollbars: settings.hideScrollbars,
                        hideCaret: settings.hideScrollbars,
                        overlap: settings.overlap,
                        waitBeforeCapture: settings.waitBeforeCapture,
                        waitBetweenStitches: settings.waitBetweenStitches,
                        lazyLoad: settings.lazyLoad,
                        name: settings.name,
                    },
                    logger,
                });
                screenshots.forEach(({ calculatedRegions: _calculatedRegions, renderEnvironment, ...baseTarget }) => {
                    transformedRenderers.push({ environment: renderEnvironment });
                    baseTargets.push({ ...baseTarget, isTransformed: true });
                    baseSettings.push(getBaseCheckSettings({ calculatedRegions: [] }));
                });
            }
        }
        else {
            transformedRenderers.push(...uniqueRenderers);
            baseTargets.push(target);
            baseSettings.push(settings);
        }
        const promises = transformedRenderers.map(async (renderer, index) => {
            const rendererLogger = logger.extend({ tags: [`renderer-${utils.general.shortid()}`] });
            try {
                if (signal === null || signal === void 0 ? void 0 : signal.aborted) {
                    rendererLogger.warn('Command "checkAndClose" was aborted before checking');
                    throw new abort_error_1.AbortError('Command "checkAndClose" was aborted before checking');
                }
                const baseEyes = await eyes.getBaseEyes({ settings: { renderer }, logger: rendererLogger });
                try {
                    if (signal === null || signal === void 0 ? void 0 : signal.aborted) {
                        rendererLogger.warn('Command "checkAndClose" was aborted before checking');
                        throw new abort_error_1.AbortError('Command "checkAndClose" was aborted before checking');
                    }
                    else if (!baseEyes.running) {
                        rendererLogger.warn(`Check on environment with id "${baseEyes.test.renderEnvironmentId}" was aborted during one of the previous steps`);
                        throw new abort_error_1.AbortError(`Check on environment with id "${baseEyes.test.renderEnvironmentId}" was aborted during one of the previous steps`);
                    }
                    await baseEyes.checkAndClose({
                        target: baseTargets[index],
                        settings: baseSettings[index],
                        logger: rendererLogger,
                    });
                }
                catch (error) {
                    rendererLogger.error(`Check on environment with id "${baseEyes.test.renderEnvironmentId}" failed due to an error`, error);
                    await baseEyes.abort({ logger: rendererLogger });
                    error.info = { eyes: baseEyes };
                    throw error;
                }
            }
            catch (error) {
                rendererLogger.error(`Check with id ${renderer.id} failed before checking started due to an error`, error);
                error.info = { ...error.info, userTestId: eyes.test.userTestId, renderer };
                throw error;
            }
        });
        transformedRenderers.forEach((renderer, index) => {
            const key = (0, extract_renderer_key_1.extractRendererKey)(renderer);
            let item = eyes.storage.get(key);
            if (!item) {
                item = { eyes: utils.promises.makeControlledPromise(), jobs: [] };
                eyes.storage.set(key, item);
            }
            item.jobs.push(promises[index]);
        });
    };
}
exports.makeCheckAndClose = makeCheckAndClose;
