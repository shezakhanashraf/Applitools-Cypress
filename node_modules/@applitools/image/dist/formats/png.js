"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toPng = exports.fromPngBuffer = exports.extractPngSize = exports.isPngBuffer = void 0;
const stream_1 = __importDefault(require("stream"));
const png = __importStar(require("png-async"));
function isPngBuffer(buffer) {
    return buffer.subarray(12, 16).toString('ascii') === 'IHDR';
}
exports.isPngBuffer = isPngBuffer;
function extractPngSize(buffer) {
    return { width: buffer.readUInt32BE(16), height: buffer.readUInt32BE(20) };
}
exports.extractPngSize = extractPngSize;
async function fromPngBuffer(buffer) {
    return new Promise((resolve, reject) => {
        const image = new png.Image();
        image.parse(buffer, (err, image) => {
            if (err)
                return reject(err);
            resolve(image);
        });
    });
}
exports.fromPngBuffer = fromPngBuffer;
async function toPng(image) {
    return new Promise((resolve, reject) => {
        let buffer = Buffer.alloc(0);
        const writable = new stream_1.default.Writable({
            write(chunk, _encoding, next) {
                buffer = Buffer.concat([buffer, chunk]);
                next();
            },
        });
        const wrapper = new png.Image({ width: image.width, height: image.height });
        wrapper.data = image.data;
        wrapper
            .pack()
            .pipe(writable)
            .on('finish', () => resolve(buffer))
            .on('error', (err) => reject(err));
    });
}
exports.toPng = toPng;
